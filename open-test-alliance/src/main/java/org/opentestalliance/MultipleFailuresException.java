/*
 * Copyright 2015 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.opentestalliance;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * @since 1.0
 */
public class MultipleFailuresException extends AssertionError {

	private static final long serialVersionUID = 110777277591630805L;

	private final String name;

	private final List<AssertionError> failures = new ArrayList<AssertionError>();

	public MultipleFailuresException(String name) {
		this.name = name;
	}

	public void addFailure(AssertionError failure) {
		failures.add(failure);
	}

	@Override
	public String getMessage() {
		if (failures.isEmpty()) {
			return name;
		}
		StringBuilder messageBuilder = new StringBuilder();
		messageBuilder.append(
			String.format("%s (%d %s)%n", name, failures.size(), pluralize(failures.size(), "failure", "failures")));
		int lastIndex = failures.size() - 1;
		for (AssertionError failure : failures.subList(0, lastIndex)) {
			messageBuilder.append(String.format("\t%s%n", nullSafeMessage(failure)));
		}
		messageBuilder.append('\t').append(nullSafeMessage(failures.get(lastIndex)));
		return messageBuilder.toString();
	}

	private String pluralize(int count, String singular, String plural) {
		return count == 1 ? singular : plural;
	}

	private String nullSafeMessage(AssertionError failure) {
		if (failure.getMessage() == null) {
			return String.format("<no message> in %s", failure.getClass().getName());
		}
		return failure.getMessage();
	}

	public List<AssertionError> getFailures() {
		return Collections.unmodifiableList(failures);
	}

	public boolean hasFailures() {
		return !failures.isEmpty();
	}

}
